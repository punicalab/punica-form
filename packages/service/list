watch;
setError;
clearErrors;
setValue;
getValues;
trigger;

setFocus;
setBlur;

initialize;

/*

public validate(): Promise<boolean> {
  return new Promise(async (resolve) => {
    const { items } = this._formData;
    this._hasError = false;

    for await (const item of items) {
      const { validation, hidden } = item;

      if (validation && !hidden) {
        const command = this.getCommandItem(item);
        const { error, errorMessages } = await validation(command);

        if (error) {
          this._hasError = true;
        }

        item.error = error;
        item.errorMessages = errorMessages;
      }
    }

    this.fireEvent(FormEvents.UPDATE, this._formData);

    resolve(this._hasError);
  });
}


public updateValue(property: keyof E, value: any): Promise<void> {
  return new Promise((resolve) => {
    const formItem = this.getItem(property) as F;
    const { control } = formItem;

    formItem.value = value;

    this.writeItems([formItem]);

    if (control) {
      const command = this.getCommandItem(formItem);

      control(command).then((formItems: Array<FormItem>) => {
        this.writeItems(formItems);
        this.fireEvent(FormEvents.UPDATE_ITEM, [formItem, ...formItems]);
        this.fireEvent(FormEvents.UPDATE, this._formData);

        resolve();
      });
    } else {
      this.fireEvent(FormEvents.UPDATE_ITEM, [formItem]);
      this.fireEvent(FormEvents.UPDATE, this._formData);

      resolve();
    }
  });
}

*/
